***///
Given a n*m matrix which contains only 0s and 1s, find out the size of maximum square sub-matrix with all 0s. You need to return the size of square with all 0s.
Input format :
Line 1 : n and m (space separated positive integers)
Next n lines : m elements of each row (separated by space).
Output Format:
Line 1 : Size of maximum square sub-matrix
Sample Input :
3 3
1 1 0
1 1 1
1 1 1
Sample Output :
1
***///



#include <bits/stdc++.h> 
using namespace std; 
int min(int a, int b, int c)
{
    if (a < b) {
        return (a < c) ? a : c;
    } else {
        return (b < c) ? b : c;
    }
}
int findMaxSquareWithAllZeros(int** arr, int row, int col){
    
    /* Don't write main().
     *  Don't read input, it is passed as function argument.
     *  Return output and don't print it.
     *  Taking input and printing output is handled automatically.
     */
     int output[row][col] = {0};
    int i, j;
    int max = 1;
    
    for (i = 0; i < row; i++) {
        for (j = 0; j < col; j++) {
            if (arr[i][j] == 0)
                output[i][j] = 1;
        }
    }
    
    for (i = 1; i < row; i++) {
        for (j = 1; j < col; j++) {
            if (output[i][j]) {
                output[i][j] = min(output[i-1][j-1], output[i-1][j], output[i][j-1]) + 1;
                if (output[i][j] > max)
                    max = output[i][j];
            }
        }
    }
    
   return max;

    
}
